Here I describe the strategy that I followed in order the predict the number of items sold for each product and for each store using 
Spark, Python and gradient boosting.

This project was never deployed, so I described the progress achieved.

Difficulties

In this project the most difficult part is the feature engineering given the amount of data.

There were around 3000 stores with daily transactions, around 40000 products overall (I think?) and data corresponding to 3-4 years.

Some other difficulties were: variety of stores. This means that the same model should be used to predict on both 
big stores and small stores. Also, the model should predict on some products which might be available in some stores but not in others.
Finally, around 20% of the products have daily transactions but the remaining 80% could spend literally weeks without selling anything.
As I noticed during the construction of this model, the latter will dominate the entire model and this is not something desireable.

Tools used

SQL where the data was stored, Pyspark for feature engineering, Python for predictions and xgboost as the mathematical algorithm working behind.

Some thoughts on possible changes for the future

A deeper classification of the stores (deeper than the existing one) and also a deeper classification of the products.
A predictive model for each group should be constructed, not a single model for alll the data. Finally, include time series.

The strategy in detail

Objective: Predict the number of items that each store will sell for each product in their inventory during a fixed week of the year.

As I don't have the data available at this moment, I'm describing the general steps with dummy data.

Using SQL queries, extract initial data in the following format:

date         day_of_week  id_store  id_product number_items_sold

01/02/2017   thursday     127       2456       3 
02/02/2017   friday       127       2456       2
03/02/2017   saturday     127       2456       4

Fixed a week of the year to be predicted, say week 15 in 2017.  Consider nine weeks prior to the week to be predicted, e.g. 
weeks 6 through 14.



                   






